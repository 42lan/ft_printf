# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    printf_and_how_it_works.txt                        :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: amalsago <amalsago@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2019/02/20 09:53:38 by amalsago          #+#    #+#              #
#    Updated: 2019/03/11 09:36:20 by amalsago         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

The format-string consist of:
ordinary characters			- they are copied in order of ther appearance
escape sequences			- 
conversion specifications	- they begins with %


Placeholder syntax:
	%[parameter$][flags][width][.precision][length]type

type
	c		Character
	s		String of character
	p		Pointer address
	d		Signed decimal integer
	i		Signed decimal integer
	o		Unsigned octal
	u		Unsigned decimal integer
	x		Unsigned hexadecimal integer (lowercase)
	X		Unsigned hexadecimal integer (upperrcase)
	f		Decimal floating point (lowercase)

If % is followed by a character that has no meaning as a format field,
the character is simply copied to stdout. For example %%

[parameter]		POSIX extension and not in C99, so can be omitted.
	n$			'n' is the number of the parameter to display. If any placeholder
				specifies a parameter, all the rest of the placeholder MUST specify
				a paramater number. Or behavior is undefined.

[flags]			The flags can be zero or more (in any order)
	'-'			Left-justify (instead default right)
	'+'			For signed %d and %i conversions,print a plus sign.
	' '			Insert blank space for %d and %i conversions, instead plus sign
				Ingored when flag '+' is present
	'0'			Left-pads the number with zeroes when [width] is specified
				only for d, i, o, u, x, X, e, E, f, g and G conversions
				Ignored if '-' is specified.
				Ignored for (i, u, x, X, o, d) if only '.' or '.0' is specified
	'#'			For o, x and X preceeed with 0, 0x and 0X respectively to any nonzero output
				For f force to write a decimal point even if no more digits follow.
				Shouldn't be use with c, d, i, u, s and p conversion specifier.

[width]			Minimum number of characters to print. If the number of characters
				in the output is less than the specified [width], black are added on
				the left or the rigth (depending if '-' flag is specified).
				If the number of characters in the output value is greater that
				specified [width] or [width] is not given, all the characters of the
				value are printed
				The [width] can ne an *, so an argument from argument list is used.
				If format-string contains [parameter], [width] cat be indicated by
				the sequence `*m$`, where m is a decimal integer in the range of
				arguments.

[.precision]	Specify the number of characters to print or the number of decimal places.
				The precision can cause truncation of the output value or rounding of a
				floating-point value.

[length]		Modifies the length of the data type
		'h'		Convert to short???
		'hh'	Convert to char???
		'l'		
		'll'
		'L'		Convert to long double???




___
csp
---

%c
	'-'		
	'+'				undefined behavior but print
	' '				undefined behavior but print
	'0'				undefined behavior but print and adds 0 if width is specified
	'#'				undefined behavior but print
	[width]			
	[precision]		undefined behavior but print

%s
	'-'		
	'+'				undefined behavior but print
	' '				undefined behavior but print
	'0'				undefined behavior but print
	'#'				undefined behavior but print
	[width]			
	[precision]		if only '.' specified don't prints argument

%p
	'-'		
	'+'				undefined behavior but print
	' '				undefined behavior but print
	'0'				undefined behavior but print
	'#'				undefined behavior but print
	[width]			
	[precision]		add at the left after 0x if precision is > thant number of digits


______
diouxX
------

%d %i
	'-'		
	'+'				
	' '				
	'0'			
	'#'				undefined behavior but print
	[width]			
	[precision]		add at the left if precision is > thant number of digits

%o
	'-'		
	'+'				undefined behavior but print
	' '				undefined behavior but print
	'0'				
	'#'				
	[width]			add '0' at the left if width > nb of digits	
	[precision]		add '0' at the left 
					if [precision] is only '.' print just number
%u
	If number < 0 prints garbage value
	'-'		
	'+'				undefined behavior but print
	' '				undefined behavior but print
	'0'				undefined behavior but print
	'#'				undefined behavior but print
	[width]			
	[precision]		add at the left after 0x if precision is > thant number of digits
	
	
%x	
	'-'		
	'+'				undefined behavior but print
	' '				undefined behavior but print
	'0'				
	'#'				
	[width]			
	[precision]		add at the left after 0x if precision is > thant number of digits


___
%f
---
	'-'		
	'+'				
	' '				
	'0'				
	'#'				writing just float
	[width]			filling with `0` if [width] > of nb of digits of number
	[precision]		if [precisin] is only '.' write only integr part and rounding






1. Unsed argument
printf("Hello ", "world");
Warning: data argumet not used by format string

2. Not enough arguments
printf("Hello %s");
Warning: more '%' conversions than data arguments
