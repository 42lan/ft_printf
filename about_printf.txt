# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    printf_and_how_it_works.txt                        :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: amalsago <amalsago@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2019/02/20 09:53:38 by amalsago          #+#    #+#              #
#    Updated: 2019/05/20 16:31:23 by amalsago         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

The format-string consist of:
ordinary characters			- they are copied in order of ther appearance
escape sequences			- 
conversion specifications	- they begins with %


Placeholder syntax:
	%[parameter$][flags][width][.precision][length]type

type
	c		Character
	s		String of character
	p		Pointer address
	d		Signed decimal integer
	i		Signed decimal integer
	o		Unsigned octal
	u		Unsigned decimal integer
	x		Unsigned hexadecimal integer (lowercase)
	X		Unsigned hexadecimal integer (upperrcase)
	f		Decimal floating point (lowercase)

If % is followed by a character that has no meaning as a format field,
the character is simply copied to stdout. For example %%

[parameter]		POSIX extension and not in C99, so can be omitted.
	n$			'n' is the number of the parameter to display. If any placeholder
				specifies a parameter, all the rest of the placeholder MUST specify
				a paramater number. Or behavior is undefined.

[flags]			The flags can be zero or more (in any order)
	'-'			Left-justify (instead default right)
	'+'			For signed %d and %i conversions,print a plus sign.
	' '			Insert blank space for %d and %i conversions, instead plus sign
				Ingored when flag '+' is present
	'0'			Left-pads the number with zeroes when [width] is specified
				only for d, i, o, u, x, X, e, E, f, g and G conversions
				Ignored if '-' is specified.
				Ignored for (i, u, x, X, o, d) if only '.' or '.0' is specified
	'#'			For o, x and X preceeed with 0, 0x and 0X respectively to any nonzero output
				For f force to write a decimal point even if no more digits follow.
				Shouldn't be use with c, d, i, u, s and p conversion specifier.

[width]			Minimum number of characters to print. If the number of characters
				in the output is less than the specified [width], black are added on
				the left or the rigth (depending if '-' flag is specified).
				If the number of characters in the output value is greater that
				specified [width] or [width] is not given, all the characters of the
				value are printed
				The [width] can ne an *, so an argument from argument list is used.
				If format-string contains [parameter], [width] cat be indicated by
				the sequence `*m$`, where m is a decimal integer in the range of
				arguments.

[.precision]	Specify the number of characters to print or the number of decimal places.
				The precision can cause truncation of the output value or rounding of a
				floating-point value.
				only '.' disable flag '0'

[length]		Modifies the length of the data type
		'h'		Convert to short???
		'hh'	Convert to char???
		'l'		
		'll'
		'L'		Convert to long double???


Char/String
	c		Char
	s		String
	p		Poiner

Number
	SIGNED
		di		Signed decimal
		f		Decimal floating point
	UNSIGNED
		u		Unsigned decimal
		o		Unsigned octal
		xX		Unsigned hexadecimal

___
csp
---

%c
	'-'		
	'+'				undefined behavior but print
	' '				undefined behavior but print
	'0'				undefined behavior but print and adds 0 if width is specified
	'#'				undefined behavior but print
	[width]			
	[precision]		undefined behavior but print

%s
	'-'		
	'+'				Deactivate; undefined behavior but print
	' '				Deactivate; undefined behavior but print
	'0'				Deactivate; undefined behavior but print
					If width > data.length padded with 0's on left instead spaces
	'#'				Отключить; undefined behavior but print
	[width]			
	[precision]		Максимальное число символов, которые будут выведены
					Если [точность] > длина строки, вывести все символы строки
					Если после '.' не указано значение, то не выводить строку

%p
	'-'		
	'+'				undefined behavior but print
	' '				undefined behavior but print
	'0'				undefined behavior but print
	'#'				undefined behavior but print
	[width]			
	[precision]		add at the left after 0x if precision is > thant number of digits


______
diouxX
------

%d %i
	'-'		
	'+'				
	' '				
	'0'			
	'#'				undefined behavior but print
	[width]			
	[precision]		add '0' at the left if precision is > thant number of digits

%o
	'-'		
	'+'				undefined behavior but print
	' '				undefined behavior but print
	'0'				
	'#'				
	[width]			add '0' at the left if width > nb of digits	
	[precision]		add '0' at the left 
					if [precision] is only '.' print just number
%u
	If number < 0 prints garbage value
	'-'		
	'+'				undefined behavior but print
	' '				undefined behavior but print
	'0'				undefined behavior but print
	'#'				undefined behavior but print
	[width]			
	[precision]		add at the left after 0x if precision is > thant number of digits
	
	
%x	
	'-'		
	'+'				undefined behavior but print
	' '				undefined behavior but print
	'0'				
	'#'				
	[width]			
	[precision]		add at the left after 0x if precision is > thant number of digits


___
%f
---
	'-'		
	'+'				
	' '				
	'0'				
	'#'				writing just float
	[width]			filling with `0` if [width] > of nb of digits of number
	[precision]		if [precisin] is only '.' write only integr part and rounding






1. Unsed argument
printf("Hello ", "world");
Warning: data argumet not used by format string

2. Not enough arguments
printf("Hello %s");
Warning: more '%' conversions than data arguments




--------------------------------------------------------------------------------
iMac			27-inch, Late 2012
macOS Sierra	10.12.6 (16G29)
Processor		2,9 GHz Intel Core i5
Memory			8 GB 1600 MHz DDR3
________________________________________________________________________________
GCC OPTIMISATION OPTIONS DIFFERENCE

LIBFT		FT_PRINTF	Size
						110760
			-Ofast		100064
-Ofast					106024	
-Ofast		-Ofast		95328
-O2			-O2			95304


=== Ofast ===
116
116
118
138
128
118
118
118
123
122
118
119
113
110
123
122
121
114
124

=== O2 ===
129
124
128
116
117
115
122
124
118
126
120
114
121
120
122
117
137
126
121
118
117
122
122
123
115
125
123
117
121
121
130
122
120
122
124
123
124
119
124
121
121
117
